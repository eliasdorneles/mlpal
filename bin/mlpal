#!/usr/bin/env python

import argparse
import sys
import os
import yaml
from collections import defaultdict

def load_config():
    # TODO read $MLPAL_TESTS
    name = 'config.yaml'
    if os.path.exists(name):
        print("%s was found, loading." % name)
        return yaml.load(open(name))
    return {}

def parse_args(config):
    print(config)

    defaults = defaultdict(lambda: None)
    for k, v in config.iteritems():
        defaults[k] = v

    tasks = ['train', 'search', 'benchmark',
             'learning_curves', 'plot_pca', 'misclassified']

    parser = argparse.ArgumentParser()
    parser.add_argument("task", help="The task to be run", choices=tasks)
    parser.add_argument("setup", help="Python module with the running definitions")
    parser.add_argument("--begin", help="The size of the smallest training set used to plot the learning curves", default=defaults.get('begin', 30), type=int)
    parser.add_argument("--points", help="Number of points in the learning curves", default=defaults.get('points', 8), type=int)
    parser.add_argument("--space", help="How are the points going to be spread in the space?", default=defaults.get('space', 'log'), type=str, choices=['log', 'linear'])
    parser.add_argument("--clfpath", help="Serialized classifier path (benchmarks only)",  default='dumps/last.pickle')
    parser.add_argument("-d", help="Launch debugger on exception", action='store_true')
    parser.add_argument("--tests", help="Loads the mlpal in the current dir", action='store_true')
    parser.add_argument("-n", help="Sample size", type=int, default=defaults['n'])
    parser.add_argument("--cv", help="Number of cv iterations", type=int, default=defaults.get('cv', 10))
    parser.add_argument("--random-state", help="Pseudo random number generator state", type=int, default=defaults['random_state'])
    parser.add_argument("-j", help="# of jobs. Default=1", type=int, default=defaults.get('j', 1))
    parser.add_argument("-o", help="Output prefix. All files generated by the task will have this prefix.", type=str, default=defaults['o'])
    return parser.parse_args()

args = parse_args(load_config())

if args.tests:
    # there must be a better way to load the module for testing
    mlpal_local_path = os.path.realpath('.')
    sys.path.insert(0, mlpal_local_path)

from mlpal.runner import run

if args.d:
    from ipdb import launch_ipdb_on_exception
    with launch_ipdb_on_exception():
        run(args)
else:
    run(args)
